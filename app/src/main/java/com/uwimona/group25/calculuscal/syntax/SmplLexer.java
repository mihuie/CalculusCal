/* The following code was generated by JFlex 1.6.1 */

package com.uwimona.group25.calculuscal.syntax;

/* Specification for ArithExp tokens */

// user customisations
import java_cup.runtime.*;

// Jlex directives
    

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>smpl/syntax/SmplLexer</tt>
 */
public class SmplLexer implements Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\2\1\2\1\13\1\15\1\16\1\1\22\0\1\2\1\35"+
    "\1\12\1\62\1\0\1\24\1\30\1\0\1\45\1\46\1\20\1\6"+
    "\1\51\1\7\1\5\1\17\2\112\10\4\1\26\1\52\1\34\1\27"+
    "\1\33\1\61\1\53\1\100\1\11\1\75\1\102\1\101\1\103\2\3"+
    "\1\73\2\3\1\106\1\3\1\74\1\76\1\110\1\3\1\107\1\72"+
    "\1\77\4\3\1\105\1\3\1\47\1\14\1\50\1\25\1\3\1\0"+
    "\1\40\1\55\1\57\1\41\1\22\1\10\1\23\1\71\1\60\2\3"+
    "\1\54\1\104\1\21\1\36\1\56\1\66\1\42\1\63\1\37\1\65"+
    "\1\67\1\3\1\111\1\70\1\64\1\43\1\31\1\44\1\32\6\0"+
    "\1\15\u1fa2\0\1\15\1\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\1\4\1\5\1\6\1\7"+
    "\1\1\1\0\1\10\1\11\2\1\1\12\1\13\1\14"+
    "\1\15\1\16\4\1\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\5\1\1\0\12\1\15\0"+
    "\1\30\2\0\1\31\2\1\1\32\1\0\1\33\1\0"+
    "\4\1\1\34\2\1\1\35\4\1\1\36\1\37\3\1"+
    "\1\40\3\1\1\41\3\1\1\42\1\43\1\44\1\45"+
    "\1\46\3\0\13\1\1\6\1\7\1\0\1\47\1\50"+
    "\1\51\1\52\1\0\1\53\4\0\1\54\1\1\2\0"+
    "\7\1\1\55\3\1\1\56\10\1\1\57\2\1\1\60"+
    "\1\1\1\61\1\62\2\63\1\0\1\64\2\1\1\65"+
    "\1\66\1\1\1\67\1\1\1\70\1\71\4\1\1\72"+
    "\1\73\1\74\1\75\1\76\1\0\1\1\2\0\1\33"+
    "\1\77\1\100\1\101\1\1\1\102\1\1\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\1\1\111\1\112\1\1"+
    "\1\113\1\114\1\115\1\116\1\1\1\0\1\117\5\1"+
    "\1\120\1\1\3\0\1\33\2\0\3\1\1\121\1\122"+
    "\1\123\1\1\1\0\2\1\1\124\3\1\2\0\1\33"+
    "\3\0\1\33\1\0\1\125\1\126\3\1\1\127\3\1"+
    "\1\33\2\0\1\130\1\131\4\1\1\33\1\132\1\1"+
    "\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2"+
    "\0\u020d\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u02ee\0\u02ee"+
    "\0\u03cf\0\u02ee\0\u02ee\0\u041a\0\u0465\0\u04b0\0\u04fb\0\u02ee"+
    "\0\u02ee\0\u02ee\0\u02ee\0\u0546\0\u02ee\0\u02ee\0\u02ee\0\u02ee"+
    "\0\u0591\0\u05dc\0\u0627\0\u0672\0\u06bd\0\u0708\0\u0753\0\u079e"+
    "\0\u07e9\0\u0834\0\u087f\0\u08ca\0\u0915\0\u0960\0\u09ab\0\u09f6"+
    "\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22\0\u0b6d\0\u0bb8\0\u0c03\0\u0c4e"+
    "\0\u0c99\0\u0ce4\0\u0d2f\0\u0d7a\0\u0dc5\0\u012c\0\u012c\0\u0e10"+
    "\0\u02ee\0\u0e5b\0\u0ea6\0\u02ee\0\u0ef1\0\u0f3c\0\u0f87\0\u0fd2"+
    "\0\u101d\0\u1068\0\u10b3\0\u02ee\0\u10fe\0\u1149\0\226\0\u1194"+
    "\0\u11df\0\u122a\0\u1275\0\u02ee\0\226\0\u12c0\0\u130b\0\u1356"+
    "\0\226\0\u13a1\0\u13ec\0\u1437\0\226\0\u1482\0\u14cd\0\u1518"+
    "\0\226\0\u1563\0\u02ee\0\u02ee\0\u02ee\0\u15ae\0\u15f9\0\u1644"+
    "\0\u168f\0\u16da\0\u1725\0\u1770\0\u17bb\0\u1806\0\u1851\0\u189c"+
    "\0\u18e7\0\u1932\0\u197d\0\u02ee\0\u02ee\0\u19c8\0\u02ee\0\u02ee"+
    "\0\u02ee\0\u02ee\0\u1a13\0\u02ee\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f"+
    "\0\226\0\u1b8a\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c"+
    "\0\u1d97\0\u1de2\0\u1e2d\0\226\0\u1e78\0\u1ec3\0\u1f0e\0\226"+
    "\0\u1f59\0\u1fa4\0\u1fef\0\u203a\0\u2085\0\u20d0\0\u211b\0\u2166"+
    "\0\226\0\u21b1\0\u21fc\0\226\0\u2247\0\226\0\u15ae\0\u02ee"+
    "\0\u2292\0\u22dd\0\u1644\0\u2328\0\u2373\0\226\0\226\0\u23be"+
    "\0\u2409\0\u2454\0\226\0\226\0\u249f\0\u24ea\0\u2535\0\u2580"+
    "\0\u02ee\0\u02ee\0\u02ee\0\u02ee\0\u02ee\0\u25cb\0\u2616\0\u2661"+
    "\0\u26ac\0\u26f7\0\226\0\u02ee\0\226\0\u2742\0\u02ee\0\u278d"+
    "\0\226\0\226\0\u27d8\0\226\0\226\0\226\0\u2823\0\u286e"+
    "\0\226\0\u28b9\0\226\0\226\0\226\0\226\0\u2904\0\u294f"+
    "\0\226\0\u299a\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6\0\u02ee\0\u2b11"+
    "\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e\0\u2d69"+
    "\0\u2db4\0\226\0\u02ee\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u2f2b"+
    "\0\226\0\u2f76\0\u2fc1\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u3138"+
    "\0\u3183\0\u31ce\0\u1bd5\0\u3219\0\u02ee\0\226\0\u3264\0\u32af"+
    "\0\u32fa\0\226\0\u3345\0\u3390\0\u33db\0\u2661\0\u30ed\0\u3426"+
    "\0\226\0\226\0\u3471\0\u34bc\0\u3507\0\u3552\0\u3183\0\226"+
    "\0\u359d\0\226";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\4\1\12\1\2\2\0\1\3\1\13\1\14"+
    "\1\15\1\16\1\4\1\17\1\20\1\21\3\0\1\22"+
    "\2\0\1\23\1\4\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\0\1\46\1\47"+
    "\6\4\1\50\1\51\1\4\1\52\1\4\1\53\2\4"+
    "\1\54\1\55\2\4\1\56\1\57\1\60\1\4\1\5"+
    "\6\0\1\61\1\62\10\0\1\63\4\0\1\64\1\65"+
    "\1\66\1\67\1\70\1\0\1\71\1\72\1\73\1\74"+
    "\1\0\1\75\55\0\2\4\1\0\4\4\7\0\3\4"+
    "\12\0\5\4\11\0\5\4\2\0\30\4\3\0\1\4"+
    "\1\5\1\76\4\4\7\0\3\4\12\0\5\4\11\0"+
    "\5\4\2\0\27\4\1\5\4\0\1\76\105\0\1\76"+
    "\3\0\1\4\1\5\1\77\4\4\7\0\3\4\12\0"+
    "\5\4\11\0\5\4\1\0\1\100\27\4\1\5\3\0"+
    "\1\4\1\5\1\77\4\4\7\0\3\4\7\0\1\101"+
    "\2\0\5\4\11\0\5\4\1\0\1\100\27\4\1\5"+
    "\3\0\2\4\1\0\4\4\7\0\3\4\12\0\1\102"+
    "\1\4\1\103\2\4\11\0\5\4\2\0\30\4\12\12"+
    "\1\104\1\0\1\105\76\12\17\0\1\106\1\107\210\0"+
    "\2\4\1\0\4\4\7\0\1\4\1\110\1\4\12\0"+
    "\1\111\4\4\11\0\5\4\2\0\30\4\3\0\2\4"+
    "\1\0\4\4\7\0\3\4\12\0\5\4\11\0\1\112"+
    "\4\4\2\0\3\4\1\113\24\4\50\0\1\114\45\0"+
    "\2\4\1\0\4\4\7\0\3\4\12\0\2\4\1\115"+
    "\2\4\11\0\5\4\2\0\6\4\1\116\21\4\3\0"+
    "\2\4\1\0\4\4\7\0\3\4\12\0\5\4\11\0"+
    "\5\4\2\0\1\117\27\4\3\0\2\4\1\0\4\4"+
    "\7\0\1\4\1\120\1\4\12\0\5\4\11\0\4\4"+
    "\1\121\2\0\30\4\3\0\2\4\1\0\4\4\7\0"+
    "\1\4\1\122\1\4\12\0\1\123\4\4\11\0\5\4"+
    "\2\0\30\4\26\0\1\124\67\0\2\4\1\0\4\4"+
    "\7\0\1\125\1\126\1\4\12\0\2\4\1\127\2\4"+
    "\11\0\4\4\1\130\2\0\30\4\3\0\2\4\1\0"+
    "\4\4\7\0\1\4\1\131\1\4\12\0\5\4\11\0"+
    "\5\4\2\0\30\4\3\0\2\4\1\0\4\4\7\0"+
    "\3\4\12\0\2\4\1\132\1\4\1\133\11\0\1\134"+
    "\3\4\1\135\2\0\30\4\3\0\2\4\1\0\4\4"+
    "\7\0\3\4\12\0\1\136\1\4\1\137\1\140\1\4"+
    "\11\0\5\4\2\0\30\4\3\0\2\4\1\0\2\4"+
    "\1\141\1\4\7\0\1\142\2\4\12\0\5\4\11\0"+
    "\5\4\2\0\30\4\10\0\1\143\11\0\1\144\14\0"+
    "\1\145\15\0\1\146\1\0\1\147\31\0\1\150\4\0"+
    "\2\4\1\0\4\4\7\0\3\4\12\0\5\4\11\0"+
    "\4\4\1\151\2\0\2\4\1\152\25\4\3\0\2\4"+
    "\1\0\4\4\7\0\3\4\12\0\5\4\11\0\5\4"+
    "\2\0\10\4\1\153\5\4\1\154\11\4\3\0\2\4"+
    "\1\0\4\4\7\0\1\155\2\4\12\0\5\4\11\0"+
    "\5\4\2\0\11\4\1\156\16\4\3\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\5\4\11\0\5\4\2\0"+
    "\13\4\1\157\14\4\3\0\2\4\1\0\4\4\7\0"+
    "\3\4\12\0\5\4\11\0\5\4\2\0\15\4\1\160"+
    "\12\4\3\0\2\4\1\0\4\4\7\0\3\4\12\0"+
    "\5\4\11\0\5\4\2\0\10\4\1\161\17\4\3\0"+
    "\2\4\1\0\4\4\7\0\3\4\12\0\5\4\11\0"+
    "\5\4\2\0\15\4\1\162\12\4\3\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\5\4\11\0\5\4\2\0"+
    "\11\4\1\125\16\4\3\0\2\4\1\0\4\4\7\0"+
    "\3\4\12\0\5\4\11\0\5\4\2\0\13\4\1\163"+
    "\14\4\3\0\2\4\1\0\4\4\7\0\3\4\12\0"+
    "\5\4\11\0\5\4\2\0\10\4\1\135\17\4\1\0"+
    "\2\164\10\0\1\164\2\0\1\164\75\0\2\165\10\0"+
    "\1\165\2\0\1\165\75\0\2\14\10\0\1\14\2\0"+
    "\1\14\75\0\2\20\10\0\1\20\2\0\1\20\123\0"+
    "\1\166\64\0\2\167\10\0\1\167\2\0\1\167\75\0"+
    "\2\170\10\0\1\170\2\0\1\170\75\0\2\171\10\0"+
    "\1\171\2\0\1\171\75\0\2\172\10\0\1\172\2\0"+
    "\1\172\10\0\1\173\64\0\2\174\10\0\1\174\2\0"+
    "\1\174\10\0\1\175\112\0\1\176\125\0\1\177\71\0"+
    "\1\200\146\0\1\146\33\0\1\150\4\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\4\4\1\201\11\0\5\4"+
    "\2\0\30\4\3\0\2\4\1\0\4\4\7\0\3\4"+
    "\12\0\5\4\11\0\3\4\1\202\1\4\2\0\30\4"+
    "\1\12\1\0\11\12\1\0\1\12\2\0\74\12\1\106"+
    "\1\0\11\106\1\0\1\106\2\0\74\106\17\107\1\203"+
    "\1\204\72\107\3\0\2\4\1\0\4\4\7\0\2\4"+
    "\1\205\12\0\5\4\11\0\5\4\2\0\30\4\3\0"+
    "\2\4\1\0\4\4\7\0\3\4\12\0\1\4\1\206"+
    "\3\4\11\0\5\4\2\0\30\4\3\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\5\4\11\0\5\4\2\0"+
    "\1\207\27\4\3\0\2\4\1\0\4\4\7\0\3\4"+
    "\12\0\5\4\11\0\5\4\2\0\2\4\1\210\1\4"+
    "\1\211\23\4\3\0\2\4\1\0\4\4\7\0\3\4"+
    "\12\0\5\4\11\0\5\4\2\0\5\4\1\212\22\4"+
    "\3\0\2\4\1\0\4\4\7\0\1\4\1\213\1\4"+
    "\12\0\5\4\11\0\5\4\2\0\30\4\3\0\2\4"+
    "\1\0\2\4\1\214\1\4\7\0\3\4\12\0\5\4"+
    "\11\0\5\4\2\0\30\4\3\0\2\4\1\0\2\4"+
    "\1\215\1\4\7\0\3\4\12\0\5\4\11\0\5\4"+
    "\2\0\30\4\3\0\2\4\1\0\4\4\7\0\3\4"+
    "\12\0\2\4\1\216\2\4\11\0\5\4\2\0\30\4"+
    "\3\0\2\4\1\0\4\4\7\0\3\4\12\0\1\217"+
    "\4\4\11\0\5\4\2\0\30\4\3\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\1\4\1\220\3\4\11\0"+
    "\5\4\2\0\30\4\3\0\2\4\1\0\4\4\7\0"+
    "\3\4\12\0\5\4\11\0\5\4\2\0\1\4\1\221"+
    "\26\4\3\0\2\4\1\0\4\4\7\0\3\4\12\0"+
    "\5\4\11\0\5\4\2\0\1\222\20\4\1\223\6\4"+
    "\3\0\2\4\1\0\4\4\7\0\3\4\12\0\5\4"+
    "\11\0\4\4\1\224\2\0\30\4\3\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\1\225\4\4\11\0\4\4"+
    "\1\226\2\0\30\4\3\0\2\4\1\0\4\4\7\0"+
    "\3\4\12\0\1\227\4\4\11\0\5\4\2\0\30\4"+
    "\3\0\2\4\1\0\4\4\7\0\1\230\2\4\12\0"+
    "\5\4\11\0\5\4\2\0\30\4\3\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\4\4\1\231\11\0\1\232"+
    "\4\4\2\0\1\233\27\4\3\0\2\4\1\0\4\4"+
    "\7\0\3\4\12\0\4\4\1\234\11\0\5\4\2\0"+
    "\30\4\3\0\2\4\1\0\2\4\1\235\1\4\7\0"+
    "\3\4\12\0\1\4\1\236\3\4\11\0\5\4\2\0"+
    "\30\4\112\0\1\237\4\240\1\241\3\240\2\241\2\0"+
    "\1\242\5\240\1\241\15\240\2\241\13\240\1\241\1\240"+
    "\1\241\15\240\1\241\2\240\4\241\6\240\1\241\4\0"+
    "\1\243\3\0\2\243\10\0\1\243\15\0\2\243\13\0"+
    "\1\243\1\0\1\243\15\0\1\243\2\0\4\243\6\0"+
    "\1\243\3\0\2\4\1\0\4\4\7\0\3\4\12\0"+
    "\5\4\11\0\5\4\2\0\1\4\1\244\26\4\3\0"+
    "\2\4\1\0\4\4\7\0\3\4\12\0\5\4\11\0"+
    "\1\4\1\245\3\4\2\0\30\4\3\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\5\4\11\0\5\4\2\0"+
    "\11\4\1\246\16\4\3\0\2\4\1\0\4\4\7\0"+
    "\3\4\12\0\5\4\11\0\5\4\2\0\12\4\1\247"+
    "\15\4\3\0\2\4\1\0\2\4\1\235\1\4\7\0"+
    "\3\4\12\0\5\4\11\0\5\4\2\0\30\4\3\0"+
    "\2\4\1\0\4\4\7\0\3\4\12\0\5\4\11\0"+
    "\5\4\2\0\14\4\1\236\3\4\1\250\7\4\3\0"+
    "\2\4\1\0\4\4\7\0\3\4\12\0\5\4\11\0"+
    "\5\4\2\0\7\4\1\251\1\4\1\252\2\4\1\253"+
    "\13\4\3\0\2\4\1\0\4\4\7\0\3\4\12\0"+
    "\5\4\11\0\5\4\2\0\11\4\1\254\10\4\1\255"+
    "\5\4\3\0\2\4\1\0\4\4\7\0\3\4\12\0"+
    "\5\4\11\0\5\4\2\0\20\4\1\256\7\4\3\0"+
    "\2\4\1\0\4\4\7\0\3\4\12\0\5\4\11\0"+
    "\5\4\2\0\12\4\1\257\15\4\3\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\5\4\11\0\5\4\2\0"+
    "\13\4\1\260\14\4\1\0\2\261\10\0\1\261\2\0"+
    "\1\261\75\0\2\262\10\0\1\262\2\0\1\262\75\0"+
    "\2\263\10\0\1\263\2\0\1\263\75\0\2\264\10\0"+
    "\1\264\2\0\1\264\75\0\2\265\10\0\1\265\2\0"+
    "\1\265\135\0\1\266\54\0\2\4\1\0\4\4\7\0"+
    "\3\4\12\0\1\4\1\267\3\4\11\0\5\4\2\0"+
    "\30\4\17\107\1\270\1\271\111\107\1\272\1\204\72\107"+
    "\3\0\2\4\1\0\1\4\1\273\2\4\7\0\3\4"+
    "\12\0\5\4\11\0\5\4\2\0\30\4\1\0\2\274"+
    "\2\4\1\0\4\4\1\0\1\274\2\0\1\274\2\0"+
    "\3\4\12\0\5\4\11\0\5\4\2\0\30\4\3\0"+
    "\2\4\1\0\4\4\7\0\1\4\1\275\1\4\12\0"+
    "\5\4\11\0\5\4\2\0\30\4\3\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\2\4\1\276\2\4\11\0"+
    "\5\4\2\0\30\4\3\0\2\4\1\0\4\4\7\0"+
    "\3\4\12\0\5\4\11\0\5\4\1\277\1\0\30\4"+
    "\3\0\2\4\1\0\4\4\7\0\3\4\12\0\5\4"+
    "\11\0\1\300\4\4\2\0\30\4\3\0\2\4\1\0"+
    "\4\4\7\0\1\301\2\4\12\0\5\4\11\0\5\4"+
    "\2\0\30\4\3\0\2\4\1\0\2\4\1\302\1\4"+
    "\7\0\3\4\12\0\5\4\11\0\5\4\2\0\30\4"+
    "\3\0\2\4\1\0\4\4\7\0\3\4\12\0\3\4"+
    "\1\303\1\4\11\0\5\4\2\0\30\4\3\0\2\4"+
    "\1\0\4\4\7\0\3\4\12\0\1\4\1\304\3\4"+
    "\11\0\5\4\2\0\30\4\3\0\2\4\1\0\4\4"+
    "\7\0\3\4\12\0\5\4\11\0\5\4\2\0\5\4"+
    "\1\305\22\4\3\0\2\4\1\0\4\4\7\0\3\4"+
    "\12\0\1\4\1\306\3\4\11\0\5\4\2\0\30\4"+
    "\3\0\2\4\1\0\4\4\7\0\3\4\12\0\5\4"+
    "\11\0\4\4\1\307\2\0\30\4\3\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\4\4\1\310\11\0\5\4"+
    "\2\0\30\4\3\0\2\4\1\0\4\4\7\0\3\4"+
    "\12\0\5\4\11\0\3\4\1\311\1\4\2\0\30\4"+
    "\3\0\2\4\1\0\4\4\7\0\1\312\2\4\12\0"+
    "\5\4\11\0\5\4\2\0\30\4\3\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\1\4\1\313\3\4\11\0"+
    "\5\4\2\0\30\4\3\0\2\4\1\0\4\4\7\0"+
    "\3\4\12\0\1\4\1\314\3\4\11\0\5\4\2\0"+
    "\30\4\3\0\2\4\1\0\4\4\7\0\3\4\12\0"+
    "\5\4\11\0\1\315\4\4\2\0\30\4\3\0\2\4"+
    "\1\0\4\4\7\0\1\4\1\316\1\4\12\0\5\4"+
    "\11\0\5\4\2\0\30\4\3\0\2\4\1\0\4\4"+
    "\7\0\3\4\12\0\5\4\11\0\4\4\1\317\2\0"+
    "\30\4\4\0\1\320\3\0\2\320\10\0\1\320\15\0"+
    "\2\320\13\0\1\320\1\0\1\320\15\0\1\320\2\0"+
    "\4\320\6\0\1\320\1\240\1\0\11\240\1\0\1\240"+
    "\2\0\74\240\3\0\2\4\1\0\4\4\7\0\1\4"+
    "\1\321\1\4\12\0\5\4\11\0\5\4\2\0\30\4"+
    "\3\0\2\4\1\0\4\4\7\0\3\4\12\0\5\4"+
    "\11\0\5\4\2\0\1\322\27\4\3\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\5\4\11\0\5\4\2\0"+
    "\10\4\1\323\17\4\3\0\2\4\1\0\4\4\7\0"+
    "\3\4\12\0\5\4\11\0\5\4\2\0\16\4\1\324"+
    "\11\4\3\0\2\4\1\0\4\4\7\0\3\4\12\0"+
    "\5\4\11\0\5\4\2\0\14\4\1\314\13\4\3\0"+
    "\2\4\1\0\4\4\7\0\3\4\12\0\5\4\11\0"+
    "\5\4\2\0\23\4\1\325\4\4\3\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\5\4\11\0\5\4\2\0"+
    "\20\4\1\302\7\4\3\0\2\4\1\0\4\4\7\0"+
    "\3\4\12\0\5\4\11\0\5\4\2\0\14\4\1\326"+
    "\13\4\3\0\2\4\1\0\4\4\7\0\3\4\12\0"+
    "\5\4\11\0\5\4\2\0\14\4\1\304\13\4\1\0"+
    "\2\327\10\0\1\327\2\0\1\327\77\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\1\330\4\4\11\0\5\4"+
    "\2\0\30\4\1\331\1\107\11\331\1\107\1\331\2\107"+
    "\1\270\1\332\72\331\17\333\1\334\1\335\72\333\17\0"+
    "\1\331\1\336\75\0\2\4\1\0\4\4\7\0\3\4"+
    "\12\0\5\4\11\0\1\337\4\4\2\0\30\4\3\0"+
    "\2\4\1\0\4\4\7\0\3\4\12\0\1\340\4\4"+
    "\11\0\5\4\2\0\30\4\3\0\2\4\1\0\4\4"+
    "\7\0\3\4\12\0\5\4\11\0\4\4\1\341\2\0"+
    "\30\4\3\0\2\4\1\0\4\4\7\0\3\4\12\0"+
    "\1\4\1\342\3\4\11\0\5\4\2\0\30\4\3\0"+
    "\2\4\1\0\4\4\7\0\3\4\12\0\5\4\11\0"+
    "\5\4\1\343\1\0\30\4\3\0\2\4\1\0\4\4"+
    "\7\0\3\4\12\0\1\4\1\344\3\4\11\0\5\4"+
    "\2\0\30\4\3\0\2\4\1\0\4\4\7\0\1\345"+
    "\2\4\12\0\5\4\11\0\5\4\2\0\30\4\4\0"+
    "\1\346\3\0\2\346\10\0\1\346\15\0\2\346\13\0"+
    "\1\346\1\0\1\346\15\0\1\346\2\0\4\346\6\0"+
    "\1\346\3\0\2\4\1\0\4\4\7\0\3\4\12\0"+
    "\1\4\1\347\3\4\11\0\5\4\2\0\30\4\3\0"+
    "\2\4\1\0\4\4\7\0\3\4\12\0\5\4\11\0"+
    "\5\4\2\0\11\4\1\350\16\4\3\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\5\4\11\0\5\4\2\0"+
    "\12\4\1\351\15\4\3\0\2\4\1\0\4\4\7\0"+
    "\3\4\12\0\5\4\11\0\5\4\2\0\13\4\1\352"+
    "\14\4\3\0\2\4\1\0\4\4\7\0\3\4\12\0"+
    "\5\4\11\0\5\4\2\0\13\4\1\353\14\4\3\0"+
    "\2\4\1\0\4\4\7\0\3\4\12\0\4\4\1\354"+
    "\11\0\5\4\2\0\30\4\1\331\1\107\11\331\1\107"+
    "\1\331\2\107\1\270\1\355\72\331\1\356\1\333\11\356"+
    "\1\333\1\356\2\333\1\357\1\360\72\356\17\333\1\361"+
    "\1\335\72\333\17\336\1\356\1\362\72\336\17\333\1\363"+
    "\1\335\72\333\20\336\1\364\72\336\3\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\5\4\11\0\5\4\1\365"+
    "\1\0\30\4\3\0\2\4\1\0\4\4\7\0\3\4"+
    "\12\0\4\4\1\366\11\0\5\4\2\0\30\4\3\0"+
    "\2\4\1\0\4\4\7\0\1\367\2\4\12\0\5\4"+
    "\11\0\5\4\2\0\30\4\3\0\2\4\1\0\4\4"+
    "\7\0\3\4\12\0\5\4\11\0\1\370\4\4\2\0"+
    "\30\4\3\0\2\4\1\0\4\4\7\0\3\4\12\0"+
    "\5\4\11\0\4\4\1\371\2\0\30\4\4\0\1\240"+
    "\3\0\2\240\10\0\1\240\15\0\2\240\13\0\1\240"+
    "\1\0\1\240\15\0\1\240\2\0\4\240\6\0\1\240"+
    "\3\0\2\4\1\0\4\4\7\0\3\4\12\0\4\4"+
    "\1\372\11\0\5\4\2\0\30\4\3\0\2\4\1\0"+
    "\4\4\7\0\3\4\12\0\5\4\11\0\5\4\2\0"+
    "\10\4\1\373\17\4\3\0\2\4\1\0\4\4\7\0"+
    "\3\4\12\0\5\4\11\0\5\4\2\0\24\4\1\366"+
    "\3\4\3\0\2\4\1\0\4\4\7\0\3\4\12\0"+
    "\5\4\11\0\5\4\2\0\24\4\1\374\3\4\3\0"+
    "\2\4\1\0\4\4\7\0\3\4\12\0\5\4\11\0"+
    "\4\4\1\375\2\0\30\4\1\331\1\107\11\331\1\107"+
    "\1\331\2\107\1\376\1\355\72\331\1\356\1\333\11\356"+
    "\1\333\1\356\2\333\1\377\1\360\73\356\1\333\11\356"+
    "\1\333\1\356\2\333\1\377\1\332\73\356\1\333\11\356"+
    "\1\333\1\356\2\333\1\376\1\360\72\356\17\333\1\377"+
    "\1\u0100\72\333\17\336\1\333\1\364\111\336\1\107\1\364"+
    "\72\336\3\0\2\4\1\0\4\4\7\0\3\4\12\0"+
    "\1\4\1\u0101\3\4\11\0\5\4\2\0\30\4\3\0"+
    "\2\4\1\0\4\4\7\0\1\u0102\2\4\12\0\5\4"+
    "\11\0\5\4\2\0\30\4\3\0\2\4\1\0\4\4"+
    "\7\0\3\4\12\0\1\4\1\u0103\3\4\11\0\5\4"+
    "\2\0\30\4\3\0\2\4\1\0\4\4\7\0\3\4"+
    "\12\0\5\4\11\0\5\4\2\0\14\4\1\u0104\13\4"+
    "\3\0\2\4\1\0\4\4\7\0\3\4\12\0\5\4"+
    "\11\0\5\4\2\0\10\4\1\u0105\17\4\3\0\2\4"+
    "\1\0\4\4\7\0\3\4\12\0\2\4\1\u0106\2\4"+
    "\11\0\5\4\2\0\30\4\17\333\1\u0107\1\335\72\333"+
    "\3\0\2\4\1\0\4\4\7\0\3\4\12\0\5\4"+
    "\11\0\5\4\2\0\5\4\1\u0108\22\4\3\0\2\4"+
    "\1\0\4\4\7\0\3\4\12\0\5\4\11\0\5\4"+
    "\2\0\22\4\1\u0108\5\4\3\0\2\4\1\0\4\4"+
    "\7\0\3\4\12\0\5\4\11\0\5\4\2\0\15\4"+
    "\1\u0109\12\4\3\0\2\4\1\0\4\4\7\0\3\4"+
    "\12\0\5\4\11\0\1\u010a\4\4\2\0\30\4\3\0"+
    "\2\4\1\0\4\4\7\0\3\4\12\0\5\4\11\0"+
    "\5\4\2\0\23\4\1\u010a\4\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\1\1\0\1\1\1\11\2\1\2\11\1\1\2\11"+
    "\4\1\4\11\1\1\4\11\5\1\1\0\12\1\15\0"+
    "\1\1\2\0\1\11\2\1\1\11\1\0\1\1\1\0"+
    "\4\1\1\11\7\1\1\11\16\1\3\11\3\0\13\1"+
    "\2\11\1\0\4\11\1\0\1\11\4\0\2\1\2\0"+
    "\33\1\1\11\1\1\1\0\16\1\5\11\1\0\1\1"+
    "\2\0\2\1\1\11\2\1\1\11\20\1\1\0\6\1"+
    "\1\11\1\1\3\0\1\1\2\0\4\1\1\11\2\1"+
    "\1\0\6\1\2\0\1\1\3\0\1\1\1\0\1\11"+
    "\11\1\2\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public int getChar() {
	return yychar + 1;
    }

    public int getColumn() {
    	return yycolumn + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmplLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { // VARIABLE
				return new Symbol(sym.VARIABLE, yytext());
            }
          case 91: break;
          case 2: 
            { //skip newline, but reset char counter
			 yychar = 0;
            }
          case 92: break;
          case 3: 
            { // skip whitespace
            }
          case 93: break;
          case 4: 
            { // INTEGER
		    	return new Symbol(sym.INTEGER, 
					new Integer(yytext()));
            }
          case 94: break;
          case 5: 
            { return new Symbol(sym.PERIOD);
            }
          case 95: break;
          case 6: 
            { return new Symbol(sym.PLUS);
            }
          case 96: break;
          case 7: 
            { return new Symbol(sym.MINUS);
            }
          case 97: break;
          case 8: 
            { return new Symbol(sym.DIV);
            }
          case 98: break;
          case 9: 
            { return new Symbol(sym.MUL);
            }
          case 99: break;
          case 10: 
            { return new Symbol(sym.MOD);
            }
          case 100: break;
          case 11: 
            { return new Symbol(sym.POW);
            }
          case 101: break;
          case 12: 
            { return new Symbol(sym.COLON);
            }
          case 102: break;
          case 13: 
            { return new Symbol(sym.BNOT);
            }
          case 103: break;
          case 14: 
            { return new Symbol(sym.FACTORIAL);
            }
          case 104: break;
          case 15: 
            { return new Symbol(sym.LBRACE);
            }
          case 105: break;
          case 16: 
            { return new Symbol(sym.RBRACE);
            }
          case 106: break;
          case 17: 
            { return new Symbol(sym.LPAREN);
            }
          case 107: break;
          case 18: 
            { return new Symbol(sym.RPAREN);
            }
          case 108: break;
          case 19: 
            { return new Symbol(sym.LBRACKET);
            }
          case 109: break;
          case 20: 
            { return new Symbol(sym.RBRACKET);
            }
          case 110: break;
          case 21: 
            { return new Symbol(sym.COMMA);
            }
          case 111: break;
          case 22: 
            { return new Symbol(sym.SEMI);
            }
          case 112: break;
          case 23: 
            { return new Symbol(sym.LSTCONCAT);
            }
          case 113: break;
          case 24: 
            { // REAL NUMBER
				return new Symbol(sym.REAL,
					new Double(yytext()));
            }
          case 114: break;
          case 25: 
            { return new Symbol(sym.APPROACHES);
            }
          case 115: break;
          case 26: 
            { return new Symbol(sym.STRING,
					yytext().substring(1, yytext().length()-1));
            }
          case 116: break;
          case 27: 
            { // skip comment
            }
          case 117: break;
          case 28: 
            { return new Symbol(sym.RVEC);
            }
          case 118: break;
          case 29: 
            { return new Symbol(sym.AS);
            }
          case 119: break;
          case 30: 
            { return new Symbol(sym.LVEC);
            }
          case 120: break;
          case 31: 
            { return new Symbol(sym.LOG);
            }
          case 121: break;
          case 32: 
            { return new Symbol(sym.BE);
            }
          case 122: break;
          case 33: 
            { return new Symbol(sym.PI);
            }
          case 123: break;
          case 34: 
            { return new Symbol(sym.IF);
            }
          case 124: break;
          case 35: 
            { return new Symbol(sym.IN);
            }
          case 125: break;
          case 36: 
            { return new Symbol(sym.BOOL, false);
            }
          case 126: break;
          case 37: 
            { return new Symbol(sym.EMPTYLIST);
            }
          case 127: break;
          case 38: 
            { return new Symbol(sym.BOOL, true);
            }
          case 128: break;
          case 39: 
            { return new Symbol(sym.EQ);
            }
          case 129: break;
          case 40: 
            { return new Symbol(sym.BAND);
            }
          case 130: break;
          case 41: 
            { return new Symbol(sym.BOR);
            }
          case 131: break;
          case 42: 
            { return new Symbol(sym.GT);
            }
          case 132: break;
          case 43: 
            { return new Symbol(sym.LT);
            }
          case 133: break;
          case 44: 
            { return new Symbol(sym.FOR);
            }
          case 134: break;
          case 45: 
            { return new Symbol(sym.DEF);
            }
          case 135: break;
          case 46: 
            { return new Symbol(sym.LET);
            }
          case 136: break;
          case 47: 
            { return new Symbol(sym.CAR);
            }
          case 137: break;
          case 48: 
            { return new Symbol(sym.CDR);
            }
          case 138: break;
          case 49: 
            { return new Symbol(sym.INTEGRATE);
            }
          case 139: break;
          case 50: 
            { // BINARY INTEGER
				return new Symbol(sym.INTEGER,
					Integer.parseInt(yytext().replace("#b", ""), 2));
            }
          case 140: break;
          case 51: 
            { return new Symbol(sym.CHARACTER,
					yytext().replace("#c",""));
            }
          case 141: break;
          case 52: 
            { // HEXADECIMAL INTEGER
				return new Symbol(sym.INTEGER,
					Integer.parseInt(yytext().replace("#x", ""), 16));
            }
          case 142: break;
          case 53: 
            { return new Symbol(sym.SIN);
            }
          case 143: break;
          case 54: 
            { return new Symbol(sym.SEC);
            }
          case 144: break;
          case 55: 
            { return new Symbol(sym.COS);
            }
          case 145: break;
          case 56: 
            { return new Symbol(sym.COT);
            }
          case 146: break;
          case 57: 
            { return new Symbol(sym.TAN);
            }
          case 147: break;
          case 58: 
            { return new Symbol(sym.ASSIGN);
            }
          case 148: break;
          case 59: 
            { return new Symbol(sym.GE);
            }
          case 149: break;
          case 60: 
            { return new Symbol(sym.LE);
            }
          case 150: break;
          case 61: 
            { return new Symbol(sym.NEQ);
            }
          case 151: break;
          case 62: 
            { return new Symbol(sym.LOR);
            }
          case 152: break;
          case 63: 
            { return new Symbol(sym.NEG);
            }
          case 153: break;
          case 64: 
            { return new Symbol(sym.LNOT);
            }
          case 154: break;
          case 65: 
            { return new Symbol(sym.ELSE);
            }
          case 155: break;
          case 66: 
            { return new Symbol(sym.EQV);
            }
          case 156: break;
          case 67: 
            { return new Symbol(sym.THEN);
            }
          case 157: break;
          case 68: 
            { return new Symbol(sym.DIFFERENTIATE);
            }
          case 158: break;
          case 69: 
            { return new Symbol(sym.READ);
            }
          case 159: break;
          case 70: 
            { return new Symbol(sym.ROOT);
            }
          case 160: break;
          case 71: 
            { return new Symbol(sym.LAZY);
            }
          case 161: break;
          case 72: 
            { return new Symbol(sym.LIST);
            }
          case 162: break;
          case 73: 
            { return new Symbol(sym.PAIR);
            }
          case 163: break;
          case 74: 
            { return new Symbol(sym.PROC);
            }
          case 164: break;
          case 75: 
            { return new Symbol(sym.PLOT);
            }
          case 165: break;
          case 76: 
            { return new Symbol(sym.CONTINUITY);
            }
          case 166: break;
          case 77: 
            { return new Symbol(sym.CALL);
            }
          case 167: break;
          case 78: 
            { return new Symbol(sym.CASE);
            }
          case 168: break;
          case 79: 
            { return new Symbol(sym.SIZE);
            }
          case 169: break;
          case 80: 
            { return new Symbol(sym.LAND);
            }
          case 170: break;
          case 81: 
            { return new Symbol(sym.LIMIT);
            }
          case 171: break;
          case 82: 
            { return new Symbol(sym.PAIRCHECK);
            }
          case 172: break;
          case 83: 
            { return new Symbol(sym.PRINT);
            }
          case 173: break;
          case 84: 
            { return new Symbol(sym.COSEC);
            }
          case 174: break;
          case 85: 
            { return new Symbol(sym.EQUAL);
            }
          case 175: break;
          case 86: 
            { return new Symbol(sym.TAYLOR);
            }
          case 176: break;
          case 87: 
            { return new Symbol(sym.SUBSTR);
            }
          case 177: break;
          case 88: 
            { return new Symbol(sym.READINT);
            }
          case 178: break;
          case 89: 
            { return new Symbol(sym.PRINTLN);
            }
          case 179: break;
          case 90: 
            { return new Symbol(sym.INFINITY);
            }
          case 180: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
